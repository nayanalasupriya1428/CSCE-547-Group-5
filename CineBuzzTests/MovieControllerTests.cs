using CineBuzzApi.Controllers;
using CineBuzzApi.Models;
using CineBuzzApi.Services;
using Microsoft.AspNetCore.Mvc;
using Moq;

namespace CineBuzzTests
{
    [TestClass]
    public class MovieControllerTests
    {
        private Mock<IMovieService> _mockMovieService;
        private MoviesController _controller;

        [TestInitialize]
        public void SetUp()
        {
            _mockMovieService = new Mock<IMovieService>();
            _controller = new MoviesController(_mockMovieService.Object);
        }
        /// <summary>
        /// Test for if GetMovies works properly.
        /// </summary>
        /// <returns></returns>
        [TestMethod]
        public async Task GetMovies_ReturnOkWithMovies()
        {
            // Arrange: Setup the mock data which mirrors the seeded data
            var mockMovies = new List<Movie>
            {
                new Movie
                {
                    MovieId = 1,
                    Title = "Inception",
                    Description = "A thief who steals corporate secrets through the use of dream-sharing technology is given the inverse task of planting an idea into the mind of a C.E.O.",
                    Genres = new List<string> { "Action", "Sci-Fi", "Thriller" }
                },
                new Movie
                {
                    MovieId = 2,
                    Title = "The Matrix",
                    Description = "A computer hacker learns from mysterious rebels about the true nature of his reality and his role in the war against its controllers.",
                    Genres = new List<string> { "Action", "Sci-Fi" }
                }
            };

            _mockMovieService.Setup(service => service.GetAllMoviesAsync()).ReturnsAsync(mockMovies);

            // Act: Call the controller method
            var result = await _controller.GetMovies();

            // Assert: Verify the result is correct
            var okResult = result.Result as OkObjectResult;
            Assert.IsNotNull(okResult);
            Assert.AreEqual(200, okResult.StatusCode);

            var returnedMovies = okResult.Value as IEnumerable<Movie>;
            Assert.IsNotNull(returnedMovies);
            Assert.AreEqual(mockMovies.Count, returnedMovies.Count());
            Assert.AreEqual(mockMovies.First().Title, returnedMovies.First().Title);
        }

        [TestMethod]
        public async Task AddMovie_ValidMovie_ReturnsCreatedAtAction()
        {
            // Arrange: Setup the mock data
            var newMovie = new Movie
            {
                MovieId = 3, // Note: Typically, MovieId might be generated by the database, but in the mock, you can assign it.
                Title = "Interstellar",
                Description = "A team of explorers travel through a wormhole in space in an attempt to ensure humanity's survival.",
                Genres = new List<string> { "Adventure", "Sci-Fi", "Drama" }
            };

            // Mock the behavior of AddMovieAsync to return the new movie
            _mockMovieService.Setup(service => service.AddMovieAsync(It.IsAny<Movie>())).ReturnsAsync(newMovie);

            // Act: Call the AddMovie endpoint on the controller
            var result = await _controller.AddMovie(newMovie);

            // Assert: Verify the result is correct
            var createdResult = result.Result as CreatedAtActionResult;
            Assert.IsNotNull(createdResult);
            Assert.AreEqual(201, createdResult.StatusCode); // Ensure that HTTP 201 Created is returned

            // Verify that the returned movie matches the newMovie
            var returnedMovie = createdResult.Value as Movie;
            Assert.IsNotNull(returnedMovie);
            Assert.AreEqual(newMovie.MovieId, returnedMovie.MovieId);
            Assert.AreEqual(newMovie.Title, returnedMovie.Title);
            Assert.AreEqual(newMovie.Description, returnedMovie.Description);
            CollectionAssert.AreEqual(newMovie.Genres, returnedMovie.Genres.ToList());
        }

        [TestMethod]
        public async Task RemoveMovie_ExistingMovie_ReturnsNoContent()
        {
            // Arrange: Mock the service to return true (movie exists and is removed)
            _mockMovieService.Setup(service => service.RemoveMovieAsync(It.IsAny<int>())).ReturnsAsync(true);

            // Act: Call the RemoveMovie endpoint with a valid movieId
            var result = await _controller.RemoveMovie(1);

            // Assert: Verify the result is NoContentResult
            var noContentResult = result as NoContentResult;
            Assert.IsNotNull(noContentResult);
            Assert.AreEqual(204, noContentResult.StatusCode); // Verify the status code is 204 No Content
        }

        [TestMethod]
        public async Task EditMovie_ExistingMovie_ReturnsOk()
        {
            // Arrange: Mock the input and the expected output
            var movieId = 1;
            var updatedMovie = new Movie
            {
                MovieId = movieId,
                Title = "Updated Title",
                Description = "Updated Description",
                Genres = new List<string> { "Action", "Adventure" }
            };

            // Mock the service to return the updated movie
            _mockMovieService.Setup(service => service.EditMovieAsync(movieId, It.IsAny<Movie>())).ReturnsAsync(updatedMovie);

            // Act: Call the EditMovie endpoint
            var result = await _controller.EditMovie(movieId, updatedMovie);

            // Assert: Verify the result is OkObjectResult with the updated movie
            var okResult = result.Result as OkObjectResult;
            Assert.IsNotNull(okResult);
            Assert.AreEqual(200, okResult.StatusCode);

            var returnedMovie = okResult.Value as Movie;
            Assert.IsNotNull(returnedMovie);
            Assert.AreEqual(updatedMovie.MovieId, returnedMovie.MovieId);
            Assert.AreEqual(updatedMovie.Title, returnedMovie.Title);
            Assert.AreEqual(updatedMovie.Description, returnedMovie.Description);
            CollectionAssert.AreEqual(updatedMovie.Genres, returnedMovie.Genres.ToList());
        }


    }

}
